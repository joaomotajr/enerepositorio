    /** Método checar se houve violação de Alarme
     *   @return sem retorno  						*/
	public AlarmType checkAlarmLimits(Position position) {		
		
		CompanyDetector companyDetector = new CompanyDetector(position.getCompanyDetector().getUid());
		Sensor sensor = new Sensor(position.getSensor().getUid());			

		CompanyDetectorAlarmDto alarm = companyDetectorAlarmAlarmService.findByCompanyDetectorAndSensor(companyDetector.getUid(), sensor.getUid());
			
		AlarmType alarmType = AlarmType.NORMAL ;
		
		if(alarm != null) {
			
			if( position.getLastValue().compareTo( new BigDecimal(alarm.getAlarmDto().getAlarm3())) > 0 ) {
				
				alarmType = AlarmType.EVACUACAO;
			}
			else if( position.getLastValue().compareTo( new BigDecimal(alarm.getAlarmDto().getAlarm2())) > 0 ) {
				
				alarmType = AlarmType.ALERTA;
			}
			else if( position.getLastValue().compareTo( new BigDecimal(alarm.getAlarmDto().getAlarm1())) > 0 ) {
				
				alarmType = AlarmType.DETECCAO;				
			}		
		}	
		
		return alarmType;
	}


/** Método checar se houve violação de Alarme
	 * Criar Alarme correspondentes
	 * Carregar Filas de eventos 
     *   @return Tipo do Alarme */
	public AlarmType checkAndUpdateAlarmsAndActions(Position position) {		
		
		CompanyDetector companyDetector = new CompanyDetector(position.getCompanyDetector().getUid());
		Sensor sensor = new Sensor(position.getSensor().getUid());
		
		if(CompanyDetectorAlarmSingletonRepository.init()) {
			CompanyDetectorAlarmSingletonRepository.populate(companyDetectorAlarmAlarmService.findAll());
		}
			
		return getExistsAlarmAndActions(position.getLastValue(), companyDetector.getUid(), sensor.getUid());		

	}
	
	private AlarmType getExistsAlarmAndActions(BigDecimal lastValue, Long companyDetectorId, Long sensorId ) {
		
		CompanyDetectorAlarmDto alarm = CompanyDetectorAlarmSingletonRepository.findByCompanyDetectorAndSensor(companyDetectorId, sensorId);
			
		AlarmType alarmType = AlarmType.NORMAL ;
				
		if(alarm != null) {
			
			if(alarm.getAlarmDto().getAlarmOff()) {
				
				alarmType = AlarmType.OFF;
				
			}				
			else if( lastValue.compareTo( new BigDecimal(alarm.getAlarmDto().getAlarm3())) > 0 ) {
				
				alarmType = AlarmType.EVACUACAO;			
				
			}
			else if( lastValue.compareTo( new BigDecimal(alarm.getAlarmDto().getAlarm2())) > 0 ) {
				
				alarmType = AlarmType.ALERTA;
			}
			else if( lastValue.compareTo( new BigDecimal(alarm.getAlarmDto().getAlarm1())) > 0 ) {
				
				alarmType = AlarmType.DETECCAO;				
			}		
		}	
		
		actionsExecute(alarm, alarmType);
		
		return alarmType;
		
	}
	
	private void actionsExecute(CompanyDetectorAlarmDto alarm, AlarmType alarmType) {
		
		if(alarm.getAlarmDto().getAlarmEmail()) {
			
			QueueMail queueMail = new QueueMail();
			queueMail.alarmtype = alarmType;
			queueMail.to = alarm.getAlarmDto().getEmail();
			queueMail.subject = "Alerta de Alarme Detectado: " + alarmType.toString();
			
			if(alarmType == AlarmType.DETECCAO)  
				queueMail.message = alarm.getAlarmDto().getAction1();
			else if(alarmType == AlarmType.DETECCAO)  
				queueMail.message = alarm.getAlarmDto().getAction1();
			else if(alarmType == AlarmType.DETECCAO)  
				queueMail.message = alarm.getAlarmDto().getAction1();
			
			SendMailQueue.add(queueMail);
		}
			
		
	}
	
	
	
	
	
package br.com.eneeyes.main.service.scheduller.queues;
import java.util.Queue;
import javax.enterprise.context.ApplicationScoped;
import br.com.eneeyes.main.model.structs.QueueMail;

@ApplicationScoped
public class SendMailQueue  {
	
	static Queue<QueueMail> lista;
		
	public static boolean init() {
		return (lista == null || lista.isEmpty());			
	}
	
	public static void populate(Queue<QueueMail> queueMail) {
				
		lista = queueMail;		
	}
	
	public static void add(QueueMail queueMail) {
		
		lista.add(queueMail);		
	}
	
	public static QueueMail get() {
		
		return lista.poll();
	}
	
}
	